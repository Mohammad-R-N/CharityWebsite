# Generated by Django 5.0.6 on 2024-06-07 13:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('en_name', models.CharField(max_length=60, verbose_name='english name')),
                ('fa_name', models.CharField(blank=True, max_length=60, null=True, verbose_name='persian name')),
                ('description', models.CharField(blank=True, max_length=300, null=True, verbose_name='description')),
                ('date_added', models.DateTimeField(auto_now=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now_add=True, verbose_name='date modified')),
            ],
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(max_length=100, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('birth', models.DateField(verbose_name='birth day')),
                ('nc', models.IntegerField(verbose_name='nc')),
                ('major', models.CharField(max_length=100, verbose_name='major')),
                ('city', models.CharField(max_length=100, verbose_name='city')),
                ('phone', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator('09(\\d{9})$')], verbose_name='phone')),
                ('specialist_info', models.TextField(verbose_name='specialist info')),
                ('profile_pic', models.ImageField(upload_to='images/users/<django.db.models.fields.CharField>_<django.db.models.fields.CharField>/', verbose_name='profile picture')),
                ('marital_status', models.PositiveSmallIntegerField(choices=[(1, 'single'), (2, 'maried')], verbose_name='marital status')),
                ('gender', models.PositiveSmallIntegerField(choices=[(1, 'female'), (2, 'male')], verbose_name='gender')),
                ('education', models.PositiveSmallIntegerField(choices=[(1, 'diploma'), (2, 'associate degree'), (3, 'Bsc'), (4, 'Msc'), (5, 'Phd')], verbose_name='education')),
                ('experience', models.BooleanField(verbose_name='voulunteer exprience')),
                ('experience_info', models.TextField(verbose_name='experience info')),
                ('abilities', models.ManyToManyField(to='users.job', verbose_name='abilities')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='city')),
                ('phone', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator('09(\\d{9})$')], verbose_name='phone')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('volunteer_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.volunteer')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
